--For this project, I downloaded Spotify data from Kaggle.
--Then I created a table to insert Spotify data into.
--Finally, I performed analytics on the data using SQL. 

--Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
);

--Then I inserted the Spotify Data .csv into the table.

--Next, I explored the data using the following SQL. 
SELECT * FROM BIT_DB.Spotifydata;

SELECT * FROM BIT_DB.Spotifydata
ORDER BY artist_name;

SELECT * FROM BIT_DB.Spotifydata
ORDER BY popularity DESC;

SELECT track_name, artist_name, danceability
FROM BIT_DB.Spotifydata
WHERE danceability > 0.8
ORDER BY danceability DESC;

SELECT artist_name, track_name, avg(popularity), avg(danceability), avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

SELECT artist_name, track_name, popularity, loudness
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC;

SELECT AVG(tempo), artist_name
FROM BIT_DB.Spotifydata
GROUP BY artist_name;

SELECT artist_name, COUNT(artist_name), AVG(popularity)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY COUNT(artist_name) DESC;

SELECT duration_ms, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 5;

SELECT artist_name, track_name, popularity, speechiness, instrumentalness
FROM BIT_DB.Spotifydata
WHERE artist_name LIKE'%Olivia%'
ORDER BY popularity DESC;
